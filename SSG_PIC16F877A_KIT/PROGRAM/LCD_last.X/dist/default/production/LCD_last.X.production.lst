

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Oct 16 15:49:02 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0000                     	;# 
    56     0001                     	;# 
    57     0002                     	;# 
    58     0003                     	;# 
    59     0004                     	;# 
    60     0005                     	;# 
    61     0006                     	;# 
    62     0007                     	;# 
    63     0008                     	;# 
    64     0009                     	;# 
    65     000A                     	;# 
    66     000B                     	;# 
    67     000C                     	;# 
    68     000D                     	;# 
    69     000E                     	;# 
    70     000E                     	;# 
    71     000F                     	;# 
    72     0010                     	;# 
    73     0011                     	;# 
    74     0012                     	;# 
    75     0013                     	;# 
    76     0014                     	;# 
    77     0015                     	;# 
    78     0015                     	;# 
    79     0016                     	;# 
    80     0017                     	;# 
    81     0018                     	;# 
    82     0019                     	;# 
    83     001A                     	;# 
    84     001B                     	;# 
    85     001B                     	;# 
    86     001C                     	;# 
    87     001D                     	;# 
    88     001E                     	;# 
    89     001F                     	;# 
    90     0081                     	;# 
    91     0085                     	;# 
    92     0086                     	;# 
    93     0087                     	;# 
    94     0088                     	;# 
    95     0089                     	;# 
    96     008C                     	;# 
    97     008D                     	;# 
    98     008E                     	;# 
    99     0091                     	;# 
   100     0092                     	;# 
   101     0093                     	;# 
   102     0094                     	;# 
   103     0098                     	;# 
   104     0099                     	;# 
   105     009C                     	;# 
   106     009D                     	;# 
   107     009E                     	;# 
   108     009F                     	;# 
   109     010C                     	;# 
   110     010D                     	;# 
   111     010E                     	;# 
   112     010F                     	;# 
   113     018C                     	;# 
   114     018D                     	;# 
   115     0000                     	;# 
   116     0001                     	;# 
   117     0002                     	;# 
   118     0003                     	;# 
   119     0004                     	;# 
   120     0005                     	;# 
   121     0006                     	;# 
   122     0007                     	;# 
   123     0008                     	;# 
   124     0009                     	;# 
   125     000A                     	;# 
   126     000B                     	;# 
   127     000C                     	;# 
   128     000D                     	;# 
   129     000E                     	;# 
   130     000E                     	;# 
   131     000F                     	;# 
   132     0010                     	;# 
   133     0011                     	;# 
   134     0012                     	;# 
   135     0013                     	;# 
   136     0014                     	;# 
   137     0015                     	;# 
   138     0015                     	;# 
   139     0016                     	;# 
   140     0017                     	;# 
   141     0018                     	;# 
   142     0019                     	;# 
   143     001A                     	;# 
   144     001B                     	;# 
   145     001B                     	;# 
   146     001C                     	;# 
   147     001D                     	;# 
   148     001E                     	;# 
   149     001F                     	;# 
   150     0081                     	;# 
   151     0085                     	;# 
   152     0086                     	;# 
   153     0087                     	;# 
   154     0088                     	;# 
   155     0089                     	;# 
   156     008C                     	;# 
   157     008D                     	;# 
   158     008E                     	;# 
   159     0091                     	;# 
   160     0092                     	;# 
   161     0093                     	;# 
   162     0094                     	;# 
   163     0098                     	;# 
   164     0099                     	;# 
   165     009C                     	;# 
   166     009D                     	;# 
   167     009E                     	;# 
   168     009F                     	;# 
   169     010C                     	;# 
   170     010D                     	;# 
   171     010E                     	;# 
   172     010F                     	;# 
   173     018C                     	;# 
   174     018D                     	;# 
   175     0032                     _RB2	set	50
   176     0030                     _RB0	set	48
   177     0037                     _RB7	set	55
   178     0036                     _RB6	set	54
   179     0035                     _RB5	set	53
   180     0034                     _RB4	set	52
   181     0086                     _TRISB	set	134
   182                           
   183                           	psect	strings
   184     0003                     __pstrings:
   185     0003                     stringtab:
   186     0003                     __stringtab:
   187     0003                     stringcode:	
   188                           ;	String table - string pointers are 1 byte each
   189                           
   190     0003                     stringdir:
   191     0003  3000               	movlw	high stringdir
   192     0004  008A               	movwf	10
   193     0005  0804               	movf	4,w
   194     0006  0A84               	incf	4,f
   195     0007  0782               	addwf	2,f
   196     0008                     __stringbase:
   197     0008  3400               	retlw	0
   198     0009                     __end_of__stringtab:
   199     0009                     STR_3:
   200     0009  342E               	retlw	46	;'.'
   201     000A  342E               	retlw	46	;'.'
   202     000B  3448               	retlw	72	;'H'
   203     000C  3465               	retlw	101	;'e'
   204     000D  346C               	retlw	108	;'l'
   205     000E  346C               	retlw	108	;'l'
   206     000F  346F               	retlw	111	;'o'
   207     0010  3420               	retlw	32	;' '
   208     0011  3457               	retlw	87	;'W'
   209     0012  346F               	retlw	111	;'o'
   210     0013  3472               	retlw	114	;'r'
   211     0014  346C               	retlw	108	;'l'
   212     0015  3464               	retlw	100	;'d'
   213     0016  342E               	retlw	46	;'.'
   214     0017  342E               	retlw	46	;'.'
   215     0018  3400               	retlw	0
   216     0019                     STR_1:
   217     0019  3457               	retlw	87	;'W'
   218     001A  3465               	retlw	101	;'e'
   219     001B  346C               	retlw	108	;'l'
   220     001C  3463               	retlw	99	;'c'
   221     001D  346F               	retlw	111	;'o'
   222     001E  346D               	retlw	109	;'m'
   223     001F  3465               	retlw	101	;'e'
   224     0020  3400               	retlw	0
   225     0021                     STR_2:
   226     0021  3441               	retlw	65	;'A'
   227     0022  346C               	retlw	108	;'l'
   228     0023  346C               	retlw	108	;'l'
   229     0024  3400               	retlw	0
   230                           
   231                           	psect	cinit
   232     07FC                     start_initialization:	
   233                           ; #config settings
   234                           
   235     07FC                     __initialization:
   236     07FC                     end_of_initialization:	
   237                           ;End of C runtime variable initialization code
   238                           
   239     07FC                     __end_of__initialization:
   240     07FC  0183               	clrf	3
   241     07FD  120A  118A  2F59   	ljmp	_main	;jump to C main() function
   242                           
   243                           	psect	cstackCOMMON
   244     0070                     __pcstackCOMMON:
   245     0070                     ?_Lcd_Port:
   246     0070                     ??_Lcd_Port:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_Lcd_Cmd:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_Lcd_Init:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ?_Lcd_Write_Char:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ?_Lcd_Write_String:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     ?_Lcd_Shift_Right:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     0070                     ?_Lcd_Shift_Left:	
   265                           ; 1 bytes @ 0x0
   266                           
   267     0070                     ?_main:	
   268                           ; 1 bytes @ 0x0
   269                           
   270     0070                     ?_Lcd_Clear:	
   271                           ; 1 bytes @ 0x0
   272                           
   273     0070                     Lcd_Port@a:	
   274                           ; 2 bytes @ 0x0
   275                           
   276                           
   277                           ; 1 bytes @ 0x0
   278     0070                     	ds	1
   279     0071                     ??_Lcd_Cmd:
   280     0071                     ??_Lcd_Write_Char:	
   281                           ; 1 bytes @ 0x1
   282                           
   283                           
   284                           ; 1 bytes @ 0x1
   285     0071                     	ds	1
   286     0072                     Lcd_Write_Char@temp:
   287                           
   288                           ; 1 bytes @ 0x2
   289     0072                     	ds	1
   290     0073                     Lcd_Cmd@a:
   291     0073                     Lcd_Write_Char@y:	
   292                           ; 1 bytes @ 0x3
   293                           
   294                           
   295                           ; 1 bytes @ 0x3
   296     0073                     	ds	1
   297     0074                     ??_Lcd_Clear:
   298     0074                     ?_Lcd_Set_Cursor:	
   299                           ; 1 bytes @ 0x4
   300                           
   301     0074                     ??_Lcd_Init:	
   302                           ; 1 bytes @ 0x4
   303                           
   304     0074                     ??_Lcd_Shift_Right:	
   305                           ; 1 bytes @ 0x4
   306                           
   307     0074                     ??_Lcd_Shift_Left:	
   308                           ; 1 bytes @ 0x4
   309                           
   310     0074                     Lcd_Set_Cursor@b:	
   311                           ; 1 bytes @ 0x4
   312                           
   313     0074                     Lcd_Write_Char@a:	
   314                           ; 1 bytes @ 0x4
   315                           
   316                           
   317                           ; 1 bytes @ 0x4
   318     0074                     	ds	1
   319     0075                     ??_Lcd_Set_Cursor:
   320     0075                     ??_Lcd_Write_String:	
   321                           ; 1 bytes @ 0x5
   322                           
   323     0075                     Lcd_Write_String@i:	
   324                           ; 1 bytes @ 0x5
   325                           
   326                           
   327                           ; 2 bytes @ 0x5
   328     0075                     	ds	1
   329     0076                     Lcd_Set_Cursor@a:
   330                           
   331                           ; 1 bytes @ 0x6
   332     0076                     	ds	1
   333     0077                     Lcd_Set_Cursor@z:
   334     0077                     Lcd_Write_String@a:	
   335                           ; 1 bytes @ 0x7
   336                           
   337                           
   338                           ; 1 bytes @ 0x7
   339     0077                     	ds	1
   340     0078                     Lcd_Set_Cursor@y:
   341                           
   342                           ; 1 bytes @ 0x8
   343     0078                     	ds	1
   344     0079                     Lcd_Set_Cursor@temp:
   345                           
   346                           ; 1 bytes @ 0x9
   347     0079                     	ds	1
   348     007A                     ??_main:
   349                           
   350                           ; 1 bytes @ 0xA
   351     007A                     	ds	3
   352                           
   353                           	psect	cstackBANK0
   354     0020                     __pcstackBANK0:
   355     0020                     main@i:
   356                           
   357                           ; 2 bytes @ 0x0
   358     0020                     	ds	2
   359     0022                     main@i_73:
   360                           
   361                           ; 2 bytes @ 0x2
   362     0022                     	ds	2
   363                           
   364                           	psect	maintext
   365     0759                     __pmaintext:	
   366 ;;
   367 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   368 ;;
   369 ;; *************** function _main *****************
   370 ;; Defined at:
   371 ;;		line 26 in file "lcd_main.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;  i               2    2[BANK0 ] int 
   376 ;;  i               2    0[BANK0 ] int 
   377 ;; Return value:  Size  Location     Type
   378 ;;                  1    wreg      void 
   379 ;; Registers used:
   380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   381 ;; Tracked objects:
   382 ;;		On entry : B00/0
   383 ;;		On exit  : 0/0
   384 ;;		Unchanged: 0/0
   385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   386 ;;      Params:         0       0       0       0       0
   387 ;;      Locals:         0       4       0       0       0
   388 ;;      Temps:          3       0       0       0       0
   389 ;;      Totals:         3       4       0       0       0
   390 ;;Total ram usage:        7 bytes
   391 ;; Hardware stack levels required when called: 3
   392 ;; This function calls:
   393 ;;		_Lcd_Clear
   394 ;;		_Lcd_Init
   395 ;;		_Lcd_Set_Cursor
   396 ;;		_Lcd_Shift_Left
   397 ;;		_Lcd_Shift_Right
   398 ;;		_Lcd_Write_String
   399 ;; This function is called by:
   400 ;;		Startup code after reset
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404     0759                     _main:	
   405                           ;psect for function _main
   406                           
   407     0759                     l826:	
   408                           ;incstack = 0
   409                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   410                           
   411                           
   412                           ;lcd_main.c: 28:     TRISB = 0x00;
   413     0759  1683               	bsf	3,5	;RP0=1, select bank1
   414     075A  1303               	bcf	3,6	;RP1=0, select bank1
   415     075B  0186               	clrf	6	;volatile
   416     075C                     l828:
   417                           
   418                           ;lcd_main.c: 29:     Lcd_Init();
   419     075C  120A  118A  26FC  120A  118A  	fcall	_Lcd_Init
   420     0761                     l830:
   421                           
   422                           ;lcd_main.c: 31:     {;lcd_main.c: 32:         Lcd_Clear();
   423     0761  120A  118A  2601  120A  118A  	fcall	_Lcd_Clear
   424     0766                     l832:
   425                           
   426                           ;lcd_main.c: 33:         Lcd_Set_Cursor(1,1);
   427     0766  01F4               	clrf	Lcd_Set_Cursor@b
   428     0767  0AF4               	incf	Lcd_Set_Cursor@b,f
   429     0768  3001               	movlw	1
   430     0769  120A  118A  26BC  120A  118A  	fcall	_Lcd_Set_Cursor
   431     076E                     l834:
   432                           
   433                           ;lcd_main.c: 34:         Lcd_Write_String("Welcome");
   434     076E  3011               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   435     076F  120A  118A  2664  120A  118A  	fcall	_Lcd_Write_String
   436     0774                     l836:
   437                           
   438                           ;lcd_main.c: 36:         _delay((unsigned long)((2000)*(4000000/4000.0)));
   439     0774  300B               	movlw	11
   440     0775  00FC               	movwf	??_main+2
   441     0776  3026               	movlw	38
   442     0777  00FB               	movwf	??_main+1
   443     0778  305D               	movlw	93
   444     0779  00FA               	movwf	??_main
   445     077A                     u237:
   446     077A  0BFA               	decfsz	??_main,f
   447     077B  2F7A               	goto	u237
   448     077C  0BFB               	decfsz	??_main+1,f
   449     077D  2F7A               	goto	u237
   450     077E  0BFC               	decfsz	??_main+2,f
   451     077F  2F7A               	goto	u237
   452     0780  2F81               	nop2
   453     0781                     l838:
   454                           
   455                           ;lcd_main.c: 37:         Lcd_Set_Cursor(1,1);
   456     0781  01F4               	clrf	Lcd_Set_Cursor@b
   457     0782  0AF4               	incf	Lcd_Set_Cursor@b,f
   458     0783  3001               	movlw	1
   459     0784  120A  118A  26BC  120A  118A  	fcall	_Lcd_Set_Cursor
   460     0789                     l840:
   461                           
   462                           ;lcd_main.c: 38:         Lcd_Write_String("All");
   463     0789  3019               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   464     078A  120A  118A  2664  120A  118A  	fcall	_Lcd_Write_String
   465     078F                     l842:
   466                           
   467                           ;lcd_main.c: 40:         Lcd_Clear();
   468     078F  120A  118A  2601  120A  118A  	fcall	_Lcd_Clear
   469     0794                     l844:
   470                           
   471                           ;lcd_main.c: 41:         Lcd_Set_Cursor(2,1);
   472     0794  01F4               	clrf	Lcd_Set_Cursor@b
   473     0795  0AF4               	incf	Lcd_Set_Cursor@b,f
   474     0796  3002               	movlw	2
   475     0797  120A  118A  26BC  120A  118A  	fcall	_Lcd_Set_Cursor
   476     079C                     l846:
   477                           
   478                           ;lcd_main.c: 42:         Lcd_Write_String("..Hello World..");
   479     079C  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   480     079D  120A  118A  2664  120A  118A  	fcall	_Lcd_Write_String
   481     07A2                     l848:
   482                           
   483                           ;lcd_main.c: 44:         for(int i=0; i<14; i++)
   484     07A2  1283               	bcf	3,5	;RP0=0, select bank0
   485     07A3  1303               	bcf	3,6	;RP1=0, select bank0
   486     07A4  01A0               	clrf	main@i
   487     07A5  01A1               	clrf	main@i+1
   488     07A6                     l854:
   489                           
   490                           ;lcd_main.c: 45:         {;lcd_main.c: 46:             _delay((unsigned long)((350)*(400
      +                          0000/4000.0)));
   491     07A6  3002               	movlw	2
   492     07A7  00FC               	movwf	??_main+2
   493     07A8  30C7               	movlw	199
   494     07A9  00FB               	movwf	??_main+1
   495     07AA  3088               	movlw	136
   496     07AB  00FA               	movwf	??_main
   497     07AC                     u247:
   498     07AC  0BFA               	decfsz	??_main,f
   499     07AD  2FAC               	goto	u247
   500     07AE  0BFB               	decfsz	??_main+1,f
   501     07AF  2FAC               	goto	u247
   502     07B0  0BFC               	decfsz	??_main+2,f
   503     07B1  2FAC               	goto	u247
   504     07B2  0000               	nop
   505     07B3                     l856:
   506                           
   507                           ;lcd_main.c: 47:             Lcd_Shift_Right();
   508     07B3  120A  118A  261B  120A  118A  	fcall	_Lcd_Shift_Right
   509     07B8                     l858:
   510                           
   511                           ;lcd_main.c: 48:         }
   512     07B8  3001               	movlw	1
   513     07B9  1283               	bcf	3,5	;RP0=0, select bank0
   514     07BA  1303               	bcf	3,6	;RP1=0, select bank0
   515     07BB  07A0               	addwf	main@i,f
   516     07BC  1803               	skipnc
   517     07BD  0AA1               	incf	main@i+1,f
   518     07BE  3000               	movlw	0
   519     07BF  07A1               	addwf	main@i+1,f
   520     07C0                     l860:
   521     07C0  0821               	movf	main@i+1,w
   522     07C1  3A80               	xorlw	128
   523     07C2  00FF               	movwf	btemp+1
   524     07C3  3080               	movlw	128
   525     07C4  027F               	subwf	btemp+1,w
   526     07C5  1D03               	skipz
   527     07C6  2FC9               	goto	u215
   528     07C7  300E               	movlw	14
   529     07C8  0220               	subwf	main@i,w
   530     07C9                     u215:
   531     07C9  1C03               	skipc
   532     07CA  2FCC               	goto	u211
   533     07CB  2FCD               	goto	u210
   534     07CC                     u211:
   535     07CC  2FA6               	goto	l854
   536     07CD                     u210:
   537     07CD                     l862:
   538                           
   539                           ;lcd_main.c: 50:         for(int i=0; i<14; i++)
   540     07CD  1283               	bcf	3,5	;RP0=0, select bank0
   541     07CE  1303               	bcf	3,6	;RP1=0, select bank0
   542     07CF  01A2               	clrf	main@i_73
   543     07D0  01A3               	clrf	main@i_73+1
   544     07D1                     l868:
   545                           
   546                           ;lcd_main.c: 51:         {;lcd_main.c: 52:             _delay((unsigned long)((350)*(400
      +                          0000/4000.0)));
   547     07D1  3002               	movlw	2
   548     07D2  00FC               	movwf	??_main+2
   549     07D3  30C7               	movlw	199
   550     07D4  00FB               	movwf	??_main+1
   551     07D5  3088               	movlw	136
   552     07D6  00FA               	movwf	??_main
   553     07D7                     u257:
   554     07D7  0BFA               	decfsz	??_main,f
   555     07D8  2FD7               	goto	u257
   556     07D9  0BFB               	decfsz	??_main+1,f
   557     07DA  2FD7               	goto	u257
   558     07DB  0BFC               	decfsz	??_main+2,f
   559     07DC  2FD7               	goto	u257
   560     07DD  0000               	nop
   561     07DE                     l870:
   562                           
   563                           ;lcd_main.c: 53:             Lcd_Shift_Left();
   564     07DE  120A  118A  260E  120A  118A  	fcall	_Lcd_Shift_Left
   565     07E3                     l872:
   566                           
   567                           ;lcd_main.c: 54:         }
   568     07E3  3001               	movlw	1
   569     07E4  1283               	bcf	3,5	;RP0=0, select bank0
   570     07E5  1303               	bcf	3,6	;RP1=0, select bank0
   571     07E6  07A2               	addwf	main@i_73,f
   572     07E7  1803               	skipnc
   573     07E8  0AA3               	incf	main@i_73+1,f
   574     07E9  3000               	movlw	0
   575     07EA  07A3               	addwf	main@i_73+1,f
   576     07EB                     l874:
   577     07EB  0823               	movf	main@i_73+1,w
   578     07EC  3A80               	xorlw	128
   579     07ED  00FF               	movwf	btemp+1
   580     07EE  3080               	movlw	128
   581     07EF  027F               	subwf	btemp+1,w
   582     07F0  1D03               	skipz
   583     07F1  2FF4               	goto	u225
   584     07F2  300E               	movlw	14
   585     07F3  0222               	subwf	main@i_73,w
   586     07F4                     u225:
   587     07F4  1C03               	skipc
   588     07F5  2FF7               	goto	u221
   589     07F6  2FF8               	goto	u220
   590     07F7                     u221:
   591     07F7  2FD1               	goto	l868
   592     07F8                     u220:
   593     07F8  2F61               	goto	l830
   594     07F9  120A  118A  2800   	ljmp	start
   595     07FC                     __end_of_main:
   596                           
   597                           	psect	text1
   598     0664                     __ptext1:	
   599 ;; *************** function _Lcd_Write_String *****************
   600 ;; Defined at:
   601 ;;		line 95 in file "./lcd.h"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  a               1    wreg     PTR unsigned char 
   604 ;;		 -> STR_3(16), STR_2(4), STR_1(8), 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  a               1    7[COMMON] PTR unsigned char 
   607 ;;		 -> STR_3(16), STR_2(4), STR_1(8), 
   608 ;;  i               2    5[COMMON] int 
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      void 
   611 ;; Registers used:
   612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   618 ;;      Params:         0       0       0       0       0
   619 ;;      Locals:         3       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0
   621 ;;      Totals:         3       0       0       0       0
   622 ;;Total ram usage:        3 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; Hardware stack levels required when called: 2
   625 ;; This function calls:
   626 ;;		_Lcd_Write_Char
   627 ;; This function is called by:
   628 ;;		_main
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632     0664                     _Lcd_Write_String:	
   633                           ;psect for function _Lcd_Write_String
   634                           
   635                           
   636                           ;incstack = 0
   637                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   638                           ;Lcd_Write_String@a stored from wreg
   639     0664  00F7               	movwf	Lcd_Write_String@a
   640     0665                     l814:
   641                           
   642                           ;./lcd.h: 95: void Lcd_Write_String(char *a);./lcd.h: 96: {;./lcd.h: 97:     int i;;./lc
      +                          d.h: 98:     for(i=0; a[i]!='\0'; i++)
   643     0665  01F5               	clrf	Lcd_Write_String@i
   644     0666  01F6               	clrf	Lcd_Write_String@i+1
   645     0667  2E7B               	goto	l820
   646     0668                     l816:
   647                           
   648                           ;./lcd.h: 99:         Lcd_Write_Char(a[i]);
   649     0668  0875               	movf	Lcd_Write_String@i,w
   650     0669  0777               	addwf	Lcd_Write_String@a,w
   651     066A  0084               	movwf	4
   652     066B  120A  118A  2003  120A  118A  	fcall	stringdir
   653     0670  120A  118A  2689  120A  118A  	fcall	_Lcd_Write_Char
   654     0675                     l818:
   655     0675  3001               	movlw	1
   656     0676  07F5               	addwf	Lcd_Write_String@i,f
   657     0677  1803               	skipnc
   658     0678  0AF6               	incf	Lcd_Write_String@i+1,f
   659     0679  3000               	movlw	0
   660     067A  07F6               	addwf	Lcd_Write_String@i+1,f
   661     067B                     l820:
   662     067B  0875               	movf	Lcd_Write_String@i,w
   663     067C  0777               	addwf	Lcd_Write_String@a,w
   664     067D  0084               	movwf	4
   665     067E  120A  118A  2003  120A  118A  	fcall	stringdir
   666     0683  3A00               	xorlw	0
   667     0684  1D03               	skipz
   668     0685  2E87               	goto	u201
   669     0686  2E88               	goto	u200
   670     0687                     u201:
   671     0687  2E68               	goto	l816
   672     0688                     u200:
   673     0688                     l50:
   674     0688  0008               	return
   675     0689                     __end_of_Lcd_Write_String:
   676                           
   677                           	psect	text2
   678     0689                     __ptext2:	
   679 ;; *************** function _Lcd_Write_Char *****************
   680 ;; Defined at:
   681 ;;		line 79 in file "./lcd.h"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  a               1    wreg     unsigned char 
   684 ;; Auto vars:     Size  Location     Type
   685 ;;  a               1    4[COMMON] unsigned char 
   686 ;;  y               1    3[COMMON] unsigned char 
   687 ;;  temp            1    2[COMMON] unsigned char 
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      void 
   690 ;; Registers used:
   691 ;;		wreg, status,2, status,0, pclath, cstack
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   697 ;;      Params:         0       0       0       0       0
   698 ;;      Locals:         3       0       0       0       0
   699 ;;      Temps:          1       0       0       0       0
   700 ;;      Totals:         4       0       0       0       0
   701 ;;Total ram usage:        4 bytes
   702 ;; Hardware stack levels used: 1
   703 ;; Hardware stack levels required when called: 1
   704 ;; This function calls:
   705 ;;		_Lcd_Port
   706 ;; This function is called by:
   707 ;;		_Lcd_Write_String
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711     0689                     _Lcd_Write_Char:	
   712                           ;psect for function _Lcd_Write_Char
   713                           
   714                           
   715                           ;incstack = 0
   716                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   717                           ;Lcd_Write_Char@a stored from wreg
   718     0689  00F4               	movwf	Lcd_Write_Char@a
   719     068A                     l764:
   720                           
   721                           ;./lcd.h: 79: void Lcd_Write_Char(char a);./lcd.h: 80: {;./lcd.h: 81:     char temp, y;;
      +                          ./lcd.h: 82:     temp = a&0x0F;
   722     068A  0874               	movf	Lcd_Write_Char@a,w
   723     068B  390F               	andlw	15
   724     068C  00F2               	movwf	Lcd_Write_Char@temp
   725                           
   726                           ;./lcd.h: 83:     y = a&0xF0;
   727     068D  0874               	movf	Lcd_Write_Char@a,w
   728     068E  39F0               	andlw	240
   729     068F  00F3               	movwf	Lcd_Write_Char@y
   730     0690                     l766:
   731                           
   732                           ;./lcd.h: 84:     RB0 =1;
   733     0690  1283               	bcf	3,5	;RP0=0, select bank0
   734     0691  1303               	bcf	3,6	;RP1=0, select bank0
   735     0692  1406               	bsf	6,0	;volatile
   736     0693                     l768:
   737                           
   738                           ;./lcd.h: 85:     Lcd_Port(y>>4);
   739     0693  0873               	movf	Lcd_Write_Char@y,w
   740     0694  00F1               	movwf	??_Lcd_Write_Char
   741     0695  3004               	movlw	4
   742     0696                     u165:
   743     0696  1003               	clrc
   744     0697  0CF1               	rrf	??_Lcd_Write_Char,f
   745     0698  3EFF               	addlw	-1
   746     0699  1D03               	skipz
   747     069A  2E96               	goto	u165
   748     069B  0871               	movf	??_Lcd_Write_Char,w
   749     069C  120A  118A  2642  120A  118A  	fcall	_Lcd_Port
   750     06A1                     l770:
   751                           
   752                           ;./lcd.h: 86:     RB2 = 1;
   753     06A1  1283               	bcf	3,5	;RP0=0, select bank0
   754     06A2  1303               	bcf	3,6	;RP1=0, select bank0
   755     06A3  1506               	bsf	6,2	;volatile
   756     06A4                     l772:
   757                           
   758                           ;./lcd.h: 87:     _delay((unsigned long)((40)*(4000000/4000000.0)));
   759     06A4  300D               	movlw	13
   760     06A5  00F1               	movwf	??_Lcd_Write_Char
   761     06A6                     u267:
   762     06A6  0BF1               	decfsz	??_Lcd_Write_Char,f
   763     06A7  2EA6               	goto	u267
   764     06A8                     l774:
   765                           
   766                           ;./lcd.h: 88:     RB2 = 0;
   767     06A8  1283               	bcf	3,5	;RP0=0, select bank0
   768     06A9  1303               	bcf	3,6	;RP1=0, select bank0
   769     06AA  1106               	bcf	6,2	;volatile
   770     06AB                     l776:
   771                           
   772                           ;./lcd.h: 89:     Lcd_Port(temp);
   773     06AB  0872               	movf	Lcd_Write_Char@temp,w
   774     06AC  120A  118A  2642  120A  118A  	fcall	_Lcd_Port
   775     06B1                     l778:
   776                           
   777                           ;./lcd.h: 90:     RB2 = 1;
   778     06B1  1283               	bcf	3,5	;RP0=0, select bank0
   779     06B2  1303               	bcf	3,6	;RP1=0, select bank0
   780     06B3  1506               	bsf	6,2	;volatile
   781     06B4                     l780:
   782                           
   783                           ;./lcd.h: 91:     _delay((unsigned long)((40)*(4000000/4000000.0)));
   784     06B4  300D               	movlw	13
   785     06B5  00F1               	movwf	??_Lcd_Write_Char
   786     06B6                     u277:
   787     06B6  0BF1               	decfsz	??_Lcd_Write_Char,f
   788     06B7  2EB6               	goto	u277
   789     06B8                     l782:
   790                           
   791                           ;./lcd.h: 92:     RB2 = 0;
   792     06B8  1283               	bcf	3,5	;RP0=0, select bank0
   793     06B9  1303               	bcf	3,6	;RP1=0, select bank0
   794     06BA  1106               	bcf	6,2	;volatile
   795     06BB                     l44:
   796     06BB  0008               	return
   797     06BC                     __end_of_Lcd_Write_Char:
   798                           
   799                           	psect	text3
   800     061B                     __ptext3:	
   801 ;; *************** function _Lcd_Shift_Right *****************
   802 ;; Defined at:
   803 ;;		line 102 in file "./lcd.h"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, status,2, status,0, pclath, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   817 ;;      Params:         0       0       0       0       0
   818 ;;      Locals:         0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0
   820 ;;      Totals:         0       0       0       0       0
   821 ;;Total ram usage:        0 bytes
   822 ;; Hardware stack levels used: 1
   823 ;; Hardware stack levels required when called: 2
   824 ;; This function calls:
   825 ;;		_Lcd_Cmd
   826 ;; This function is called by:
   827 ;;		_main
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831     061B                     _Lcd_Shift_Right:	
   832                           ;psect for function _Lcd_Shift_Right
   833                           
   834     061B                     l822:	
   835                           ;incstack = 0
   836                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   837                           
   838                           
   839                           ;./lcd.h: 104:     Lcd_Cmd(0x01);
   840     061B  3001               	movlw	1
   841     061C  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
   842                           
   843                           ;./lcd.h: 105:     Lcd_Cmd(0x0C);
   844     0621  300C               	movlw	12
   845     0622  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
   846     0627                     l53:
   847     0627  0008               	return
   848     0628                     __end_of_Lcd_Shift_Right:
   849                           
   850                           	psect	text4
   851     060E                     __ptext4:	
   852 ;; *************** function _Lcd_Shift_Left *****************
   853 ;; Defined at:
   854 ;;		line 108 in file "./lcd.h"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, status,2, status,0, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   868 ;;      Params:         0       0       0       0       0
   869 ;;      Locals:         0       0       0       0       0
   870 ;;      Temps:          0       0       0       0       0
   871 ;;      Totals:         0       0       0       0       0
   872 ;;Total ram usage:        0 bytes
   873 ;; Hardware stack levels used: 1
   874 ;; Hardware stack levels required when called: 2
   875 ;; This function calls:
   876 ;;		_Lcd_Cmd
   877 ;; This function is called by:
   878 ;;		_main
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882     060E                     _Lcd_Shift_Left:	
   883                           ;psect for function _Lcd_Shift_Left
   884                           
   885     060E                     l824:	
   886                           ;incstack = 0
   887                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
   888                           
   889                           
   890                           ;./lcd.h: 110:     Lcd_Cmd(0x01);
   891     060E  3001               	movlw	1
   892     060F  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
   893                           
   894                           ;./lcd.h: 111:     Lcd_Cmd(0x08);
   895     0614  3008               	movlw	8
   896     0615  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
   897     061A                     l56:
   898     061A  0008               	return
   899     061B                     __end_of_Lcd_Shift_Left:
   900                           
   901                           	psect	text5
   902     06BC                     __ptext5:	
   903 ;; *************** function _Lcd_Set_Cursor *****************
   904 ;; Defined at:
   905 ;;		line 40 in file "./lcd.h"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  a               1    wreg     unsigned char 
   908 ;;  b               1    4[COMMON] unsigned char 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  a               1    6[COMMON] unsigned char 
   911 ;;  temp            1    9[COMMON] unsigned char 
   912 ;;  y               1    8[COMMON] unsigned char 
   913 ;;  z               1    7[COMMON] unsigned char 
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, status,2, status,0, pclath, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   923 ;;      Params:         1       0       0       0       0
   924 ;;      Locals:         4       0       0       0       0
   925 ;;      Temps:          1       0       0       0       0
   926 ;;      Totals:         6       0       0       0       0
   927 ;;Total ram usage:        6 bytes
   928 ;; Hardware stack levels used: 1
   929 ;; Hardware stack levels required when called: 2
   930 ;; This function calls:
   931 ;;		_Lcd_Cmd
   932 ;; This function is called by:
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937     06BC                     _Lcd_Set_Cursor:	
   938                           ;psect for function _Lcd_Set_Cursor
   939                           
   940                           
   941                           ;incstack = 0
   942                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   943                           ;Lcd_Set_Cursor@a stored from wreg
   944     06BC  00F6               	movwf	Lcd_Set_Cursor@a
   945     06BD                     l786:
   946                           
   947                           ;./lcd.h: 40: void Lcd_Set_Cursor(char a, char b);./lcd.h: 41: {;./lcd.h: 42:     char t
      +                          emp, z, y;;./lcd.h: 43:     if(a == 1)
   948     06BD  0376               	decf	Lcd_Set_Cursor@a,w
   949     06BE  1D03               	btfss	3,2
   950     06BF  2EC1               	goto	u171
   951     06C0  2EC2               	goto	u170
   952     06C1                     u171:
   953     06C1  2EDF               	goto	l796
   954     06C2                     u170:
   955     06C2                     l788:
   956                           
   957                           ;./lcd.h: 44:     {;./lcd.h: 45:         temp = 0x80 + b - 1;
   958     06C2  0874               	movf	Lcd_Set_Cursor@b,w
   959     06C3  3E7F               	addlw	127
   960     06C4  00F9               	movwf	Lcd_Set_Cursor@temp
   961                           
   962                           ;./lcd.h: 46:         z = temp>>4;
   963     06C5  0879               	movf	Lcd_Set_Cursor@temp,w
   964     06C6  00F5               	movwf	??_Lcd_Set_Cursor
   965     06C7  3004               	movlw	4
   966     06C8                     u185:
   967     06C8  1003               	clrc
   968     06C9  0CF5               	rrf	??_Lcd_Set_Cursor,f
   969     06CA  3EFF               	addlw	-1
   970     06CB  1D03               	skipz
   971     06CC  2EC8               	goto	u185
   972     06CD  0875               	movf	??_Lcd_Set_Cursor,w
   973     06CE  00F7               	movwf	Lcd_Set_Cursor@z
   974     06CF                     l790:
   975                           
   976                           ;./lcd.h: 47:         y = temp & 0x0f;
   977     06CF  0879               	movf	Lcd_Set_Cursor@temp,w
   978     06D0  390F               	andlw	15
   979     06D1  00F8               	movwf	Lcd_Set_Cursor@y
   980     06D2                     l792:
   981                           
   982                           ;./lcd.h: 48:         Lcd_Cmd(z);
   983     06D2  0877               	movf	Lcd_Set_Cursor@z,w
   984     06D3  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
   985     06D8                     l794:
   986                           
   987                           ;./lcd.h: 49:         Lcd_Cmd(y);
   988     06D8  0878               	movf	Lcd_Set_Cursor@y,w
   989     06D9  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
   990                           
   991                           ;./lcd.h: 50:     }
   992     06DE  2EFB               	goto	l38
   993     06DF                     l796:
   994                           
   995                           ;./lcd.h: 52:     {;./lcd.h: 53:          temp = 0xC0 + b - 1;
   996     06DF  0874               	movf	Lcd_Set_Cursor@b,w
   997     06E0  3EBF               	addlw	191
   998     06E1  00F9               	movwf	Lcd_Set_Cursor@temp
   999                           
  1000                           ;./lcd.h: 54:         z = temp>>4;
  1001     06E2  0879               	movf	Lcd_Set_Cursor@temp,w
  1002     06E3  00F5               	movwf	??_Lcd_Set_Cursor
  1003     06E4  3004               	movlw	4
  1004     06E5                     u195:
  1005     06E5  1003               	clrc
  1006     06E6  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1007     06E7  3EFF               	addlw	-1
  1008     06E8  1D03               	skipz
  1009     06E9  2EE5               	goto	u195
  1010     06EA  0875               	movf	??_Lcd_Set_Cursor,w
  1011     06EB  00F7               	movwf	Lcd_Set_Cursor@z
  1012     06EC                     l798:
  1013                           
  1014                           ;./lcd.h: 55:         y = temp & 0x0f;
  1015     06EC  0879               	movf	Lcd_Set_Cursor@temp,w
  1016     06ED  390F               	andlw	15
  1017     06EE  00F8               	movwf	Lcd_Set_Cursor@y
  1018     06EF                     l800:
  1019                           
  1020                           ;./lcd.h: 56:         Lcd_Cmd(z);
  1021     06EF  0877               	movf	Lcd_Set_Cursor@z,w
  1022     06F0  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1023     06F5                     l802:
  1024                           
  1025                           ;./lcd.h: 57:         Lcd_Cmd(y);
  1026     06F5  0878               	movf	Lcd_Set_Cursor@y,w
  1027     06F6  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1028     06FB                     l38:
  1029     06FB  0008               	return
  1030     06FC                     __end_of_Lcd_Set_Cursor:
  1031                           
  1032                           	psect	text6
  1033     06FC                     __ptext6:	
  1034 ;; *************** function _Lcd_Init *****************
  1035 ;; Defined at:
  1036 ;;		line 61 in file "./lcd.h"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, status,2, status,0, pclath, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1050 ;;      Params:         0       0       0       0       0
  1051 ;;      Locals:         0       0       0       0       0
  1052 ;;      Temps:          2       0       0       0       0
  1053 ;;      Totals:         2       0       0       0       0
  1054 ;;Total ram usage:        2 bytes
  1055 ;; Hardware stack levels used: 1
  1056 ;; Hardware stack levels required when called: 2
  1057 ;; This function calls:
  1058 ;;		_Lcd_Cmd
  1059 ;;		_Lcd_Port
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065     06FC                     _Lcd_Init:	
  1066                           ;psect for function _Lcd_Init
  1067                           
  1068     06FC                     l804:	
  1069                           ;incstack = 0
  1070                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1071                           
  1072                           
  1073                           ;./lcd.h: 63:     Lcd_Port(0x00);
  1074     06FC  3000               	movlw	0
  1075     06FD  120A  118A  2642  120A  118A  	fcall	_Lcd_Port
  1076     0702                     l806:
  1077                           
  1078                           ;./lcd.h: 64:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1079     0702  301A               	movlw	26
  1080     0703  00F5               	movwf	??_Lcd_Init+1
  1081     0704  30F8               	movlw	248
  1082     0705  00F4               	movwf	??_Lcd_Init
  1083     0706                     u287:
  1084     0706  0BF4               	decfsz	??_Lcd_Init,f
  1085     0707  2F06               	goto	u287
  1086     0708  0BF5               	decfsz	??_Lcd_Init+1,f
  1087     0709  2F06               	goto	u287
  1088     070A  0000               	nop
  1089     070B                     l808:
  1090                           
  1091                           ;./lcd.h: 65:     Lcd_Cmd(0x03);
  1092     070B  3003               	movlw	3
  1093     070C  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1094                           
  1095                           ;./lcd.h: 66:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1096     0711  3007               	movlw	7
  1097     0712  00F5               	movwf	??_Lcd_Init+1
  1098     0713  307D               	movlw	125
  1099     0714  00F4               	movwf	??_Lcd_Init
  1100     0715                     u297:
  1101     0715  0BF4               	decfsz	??_Lcd_Init,f
  1102     0716  2F15               	goto	u297
  1103     0717  0BF5               	decfsz	??_Lcd_Init+1,f
  1104     0718  2F15               	goto	u297
  1105     0719                     l810:
  1106                           
  1107                           ;./lcd.h: 67:     Lcd_Cmd(0x03);
  1108     0719  3003               	movlw	3
  1109     071A  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1110     071F                     l812:
  1111                           
  1112                           ;./lcd.h: 68:         _delay((unsigned long)((11)*(4000000/4000.0)));
  1113     071F  300F               	movlw	15
  1114     0720  00F5               	movwf	??_Lcd_Init+1
  1115     0721  3047               	movlw	71
  1116     0722  00F4               	movwf	??_Lcd_Init
  1117     0723                     u307:
  1118     0723  0BF4               	decfsz	??_Lcd_Init,f
  1119     0724  2F23               	goto	u307
  1120     0725  0BF5               	decfsz	??_Lcd_Init+1,f
  1121     0726  2F23               	goto	u307
  1122     0727  2F28               	nop2
  1123                           
  1124                           ;./lcd.h: 69:     Lcd_Cmd(0x03);
  1125     0728  3003               	movlw	3
  1126     0729  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1127                           
  1128                           ;./lcd.h: 70:     Lcd_Cmd(0x02);
  1129     072E  3002               	movlw	2
  1130     072F  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1131                           
  1132                           ;./lcd.h: 71:     Lcd_Cmd(0x02);
  1133     0734  3002               	movlw	2
  1134     0735  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1135                           
  1136                           ;./lcd.h: 72:     Lcd_Cmd(0x08);
  1137     073A  3008               	movlw	8
  1138     073B  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1139                           
  1140                           ;./lcd.h: 73:     Lcd_Cmd(0x00);
  1141     0740  3000               	movlw	0
  1142     0741  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1143                           
  1144                           ;./lcd.h: 74:     Lcd_Cmd(0x0C);
  1145     0746  300C               	movlw	12
  1146     0747  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1147                           
  1148                           ;./lcd.h: 75:     Lcd_Cmd(0x00);
  1149     074C  3000               	movlw	0
  1150     074D  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1151                           
  1152                           ;./lcd.h: 76:     Lcd_Cmd(0x06);
  1153     0752  3006               	movlw	6
  1154     0753  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1155     0758                     l41:
  1156     0758  0008               	return
  1157     0759                     __end_of_Lcd_Init:
  1158                           
  1159                           	psect	text7
  1160     0601                     __ptext7:	
  1161 ;; *************** function _Lcd_Clear *****************
  1162 ;; Defined at:
  1163 ;;		line 34 in file "./lcd.h"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;		None
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;		None
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  2   32[None  ] int 
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0, pclath, cstack
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1177 ;;      Params:         0       0       0       0       0
  1178 ;;      Locals:         0       0       0       0       0
  1179 ;;      Temps:          0       0       0       0       0
  1180 ;;      Totals:         0       0       0       0       0
  1181 ;;Total ram usage:        0 bytes
  1182 ;; Hardware stack levels used: 1
  1183 ;; Hardware stack levels required when called: 2
  1184 ;; This function calls:
  1185 ;;		_Lcd_Cmd
  1186 ;; This function is called by:
  1187 ;;		_main
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191     0601                     _Lcd_Clear:	
  1192                           ;psect for function _Lcd_Clear
  1193                           
  1194     0601                     l784:	
  1195                           ;incstack = 0
  1196                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1197                           
  1198                           
  1199                           ;./lcd.h: 36:     Lcd_Cmd(0);
  1200     0601  3000               	movlw	0
  1201     0602  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1202                           
  1203                           ;./lcd.h: 37:     Lcd_Cmd(1);
  1204     0607  3001               	movlw	1
  1205     0608  120A  118A  2628  120A  118A  	fcall	_Lcd_Cmd
  1206     060D                     l33:
  1207     060D  0008               	return
  1208     060E                     __end_of_Lcd_Clear:
  1209                           
  1210                           	psect	text8
  1211     0628                     __ptext8:	
  1212 ;; *************** function _Lcd_Cmd *****************
  1213 ;; Defined at:
  1214 ;;		line 25 in file "./lcd.h"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  a               1    wreg     unsigned char 
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;  a               1    3[COMMON] unsigned char 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, status,2, status,0, pclath, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1228 ;;      Params:         0       0       0       0       0
  1229 ;;      Locals:         1       0       0       0       0
  1230 ;;      Temps:          2       0       0       0       0
  1231 ;;      Totals:         3       0       0       0       0
  1232 ;;Total ram usage:        3 bytes
  1233 ;; Hardware stack levels used: 1
  1234 ;; Hardware stack levels required when called: 1
  1235 ;; This function calls:
  1236 ;;		_Lcd_Port
  1237 ;; This function is called by:
  1238 ;;		_Lcd_Clear
  1239 ;;		_Lcd_Set_Cursor
  1240 ;;		_Lcd_Init
  1241 ;;		_Lcd_Shift_Right
  1242 ;;		_Lcd_Shift_Left
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246     0628                     _Lcd_Cmd:	
  1247                           ;psect for function _Lcd_Cmd
  1248                           
  1249                           
  1250                           ;incstack = 0
  1251                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1252                           ;Lcd_Cmd@a stored from wreg
  1253     0628  00F3               	movwf	Lcd_Cmd@a
  1254     0629                     l754:
  1255                           
  1256                           ;./lcd.h: 25: void Lcd_Cmd(char a);./lcd.h: 26: {;./lcd.h: 27:     RB0 = 0;
  1257     0629  1283               	bcf	3,5	;RP0=0, select bank0
  1258     062A  1303               	bcf	3,6	;RP1=0, select bank0
  1259     062B  1006               	bcf	6,0	;volatile
  1260     062C                     l756:
  1261                           
  1262                           ;./lcd.h: 28:     Lcd_Port(a);
  1263     062C  0873               	movf	Lcd_Cmd@a,w
  1264     062D  120A  118A  2642  120A  118A  	fcall	_Lcd_Port
  1265     0632                     l758:
  1266                           
  1267                           ;./lcd.h: 29:     RB2 = 1;
  1268     0632  1283               	bcf	3,5	;RP0=0, select bank0
  1269     0633  1303               	bcf	3,6	;RP1=0, select bank0
  1270     0634  1506               	bsf	6,2	;volatile
  1271     0635                     l760:
  1272                           
  1273                           ;./lcd.h: 30:     _delay((unsigned long)((4)*(4000000/4000.0)));
  1274     0635  3006               	movlw	6
  1275     0636  00F2               	movwf	??_Lcd_Cmd+1
  1276     0637  3030               	movlw	48
  1277     0638  00F1               	movwf	??_Lcd_Cmd
  1278     0639                     u317:
  1279     0639  0BF1               	decfsz	??_Lcd_Cmd,f
  1280     063A  2E39               	goto	u317
  1281     063B  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1282     063C  2E39               	goto	u317
  1283     063D  0000               	nop
  1284     063E                     l762:
  1285                           
  1286                           ;./lcd.h: 31:     RB2 = 0;
  1287     063E  1283               	bcf	3,5	;RP0=0, select bank0
  1288     063F  1303               	bcf	3,6	;RP1=0, select bank0
  1289     0640  1106               	bcf	6,2	;volatile
  1290     0641                     l30:
  1291     0641  0008               	return
  1292     0642                     __end_of_Lcd_Cmd:
  1293                           
  1294                           	psect	text9
  1295     0642                     __ptext9:	
  1296 ;; *************** function _Lcd_Port *****************
  1297 ;; Defined at:
  1298 ;;		line 2 in file "./lcd.h"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  a               1    wreg     unsigned char 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  a               1    0[COMMON] unsigned char 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1312 ;;      Params:         0       0       0       0       0
  1313 ;;      Locals:         1       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0
  1315 ;;      Totals:         1       0       0       0       0
  1316 ;;Total ram usage:        1 bytes
  1317 ;; Hardware stack levels used: 1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_Lcd_Cmd
  1322 ;;		_Lcd_Init
  1323 ;;		_Lcd_Write_Char
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327     0642                     _Lcd_Port:	
  1328                           ;psect for function _Lcd_Port
  1329                           
  1330                           
  1331                           ;incstack = 0
  1332                           ; Regs used in _Lcd_Port: [wreg]
  1333                           ;Lcd_Port@a stored from wreg
  1334     0642  00F0               	movwf	Lcd_Port@a
  1335     0643                     l744:
  1336                           
  1337                           ;./lcd.h: 2: void Lcd_Port(char a);./lcd.h: 3: {;./lcd.h: 4:     if(a & 1)
  1338     0643  1C70               	btfss	Lcd_Port@a,0
  1339     0644  2E46               	goto	u121
  1340     0645  2E47               	goto	u120
  1341     0646                     u121:
  1342     0646  2E4B               	goto	l19
  1343     0647                     u120:
  1344     0647                     l746:
  1345                           
  1346                           ;./lcd.h: 5:         RB4 = 1;
  1347     0647  1283               	bcf	3,5	;RP0=0, select bank0
  1348     0648  1303               	bcf	3,6	;RP1=0, select bank0
  1349     0649  1606               	bsf	6,4	;volatile
  1350     064A  2E4E               	goto	l20
  1351     064B                     l19:	
  1352                           ;./lcd.h: 6:     else
  1353                           
  1354                           
  1355                           ;./lcd.h: 7:         RB4 = 0;
  1356     064B  1283               	bcf	3,5	;RP0=0, select bank0
  1357     064C  1303               	bcf	3,6	;RP1=0, select bank0
  1358     064D  1206               	bcf	6,4	;volatile
  1359     064E                     l20:
  1360                           
  1361                           ;./lcd.h: 9:     if(a & 2)
  1362     064E  1CF0               	btfss	Lcd_Port@a,1
  1363     064F  2E51               	goto	u131
  1364     0650  2E52               	goto	u130
  1365     0651                     u131:
  1366     0651  2E54               	goto	l21
  1367     0652                     u130:
  1368     0652                     l748:
  1369                           
  1370                           ;./lcd.h: 10:         RB5 = 1;
  1371     0652  1686               	bsf	6,5	;volatile
  1372     0653  2E55               	goto	l22
  1373     0654                     l21:	
  1374                           ;./lcd.h: 11:     else
  1375                           
  1376                           
  1377                           ;./lcd.h: 12:         RB5= 0;
  1378     0654  1286               	bcf	6,5	;volatile
  1379     0655                     l22:
  1380                           
  1381                           ;./lcd.h: 14:     if(a & 4)
  1382     0655  1D70               	btfss	Lcd_Port@a,2
  1383     0656  2E58               	goto	u141
  1384     0657  2E59               	goto	u140
  1385     0658                     u141:
  1386     0658  2E5B               	goto	l23
  1387     0659                     u140:
  1388     0659                     l750:
  1389                           
  1390                           ;./lcd.h: 15:         RB6 = 1;
  1391     0659  1706               	bsf	6,6	;volatile
  1392     065A  2E5C               	goto	l24
  1393     065B                     l23:	
  1394                           ;./lcd.h: 16:     else
  1395                           
  1396                           
  1397                           ;./lcd.h: 17:         RB6 = 0;
  1398     065B  1306               	bcf	6,6	;volatile
  1399     065C                     l24:
  1400                           
  1401                           ;./lcd.h: 19:     if(a & 8)
  1402     065C  1DF0               	btfss	Lcd_Port@a,3
  1403     065D  2E5F               	goto	u151
  1404     065E  2E60               	goto	u150
  1405     065F                     u151:
  1406     065F  2E62               	goto	l25
  1407     0660                     u150:
  1408     0660                     l752:
  1409                           
  1410                           ;./lcd.h: 20:         RB7 = 1;
  1411     0660  1786               	bsf	6,7	;volatile
  1412     0661  2E63               	goto	l27
  1413     0662                     l25:	
  1414                           ;./lcd.h: 21:     else
  1415                           
  1416                           
  1417                           ;./lcd.h: 22:         RB7 = 0;
  1418     0662  1386               	bcf	6,7	;volatile
  1419     0663                     l27:
  1420     0663  0008               	return
  1421     0664                     __end_of_Lcd_Port:
  1422     007E                     btemp	set	126	;btemp
  1423     007E                     wtemp0	set	126
  1424                           
  1425                           	psect	config
  1426                           
  1427                           ;Config register CONFIG @ 0x2007
  1428                           ;	Oscillator Selection bits
  1429                           ;	FOSC = XT, XT oscillator
  1430                           ;	Watchdog Timer Enable bit
  1431                           ;	WDTE = OFF, WDT disabled
  1432                           ;	Power-up Timer Enable bit
  1433                           ;	PWRTE = OFF, PWRT disabled
  1434                           ;	Brown-out Reset Enable bit
  1435                           ;	BOREN = ON, BOR enabled
  1436                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1437                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1438                           ;	Data EEPROM Memory Code Protection bit
  1439                           ;	CPD = OFF, Data EEPROM code protection off
  1440                           ;	Flash Program Memory Write Enable bits
  1441                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1442                           ;	In-Circuit Debugger Mode bit
  1443                           ;	DEBUG = 0x1, unprogrammed default
  1444                           ;	Flash Program Memory Code Protection bit
  1445                           ;	CP = OFF, Code protection off
  1446     2007                     	org	8199
  1447     2007  3F79               	dw	16249

Data Sizes:
    Strings     28
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[8]), STR_2(CODE[4]), STR_3(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    1573
                                             10 COMMON     3     3      0
                                              0 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     367
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     586
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Shift_Left
     _Lcd_Cmd
   _Lcd_Shift_Right
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Oct 16 15:49:02 2023

                       pc 0002                        l20 064E                        l21 0654  
                      l22 0655                        l30 0641                        l23 065B  
                      l24 065C                        l25 0662                        l33 060D  
                      l41 0758                        l50 0688                        l27 0663  
                      l19 064B                        l44 06BB                        l53 0627  
                      l38 06FB                        l56 061A                        fsr 0004  
                     l800 06EF                       l810 0719                       l802 06F5  
                     l812 071F                       l804 06FC                       l820 067B  
                     l750 0659                       l806 0702                       l822 061B  
                     l814 0665                       l830 0761                       l752 0660  
                     l744 0643                       l760 0635                       l808 070B  
                     l824 060E                       l816 0668                       l840 0789  
                     l832 0766                       l746 0647                       l762 063E  
                     l754 0629                       l770 06A1                       l818 0675  
                     l842 078F                       l834 076E                       l826 0759  
                     l748 0652                       l756 062C                       l780 06B4  
                     l772 06A4                       l764 068A                       l860 07C0  
                     l844 0794                       l836 0774                       l828 075C  
                     l758 0632                       l790 06CF                       l782 06B8  
                     l774 06A8                       l766 0690                       l870 07DE  
                     l862 07CD                       l854 07A6                       l846 079C  
                     l838 0781                       l784 0601                       l792 06D2  
                     l776 06AB                       l768 0693                       l872 07E3  
                     l856 07B3                       l848 07A2                       l794 06D8  
                     l786 06BD                       l778 06B1                       l874 07EB  
                     l858 07B8                       l788 06C2                       l796 06DF  
                     l868 07D1                       l798 06EC                       _RB0 0030  
                     _RB2 0032                       _RB4 0034                       _RB5 0035  
                     _RB6 0036                       _RB7 0037                       u120 0647  
                     u200 0688                       u121 0646                       u201 0687  
                     u130 0652                       u210 07CD                       u131 0651  
                     u211 07CC                       u140 0659                       u220 07F8  
                     u141 0658                       u221 07F7                       u150 0660  
                     u151 065F                       u215 07C9                       u225 07F4  
                     u170 06C2                       u307 0723                       u171 06C1  
                     u317 0639                       u165 0696                       u237 077A  
                     u247 07AC                       u185 06C8                       u257 07D7  
                     u195 06E5                       u267 06A6                       u277 06B6  
                     u287 0706                       u297 0715                       fsr0 0004  
                    STR_1 0019                      STR_2 0021                      STR_3 0009  
       ?_Lcd_Write_String 0070                      _main 0759                      btemp 007E  
                    start 0000        ??_Lcd_Write_String 0075           __end_of_Lcd_Cmd 0642  
                   ?_main 0070                     _TRISB 0086                     main@i 0020  
                   pclath 000A                     status 0003                     wtemp0 007E  
        __end_of_Lcd_Init 0759          __end_of_Lcd_Port 0664           __initialization 07FC  
            __end_of_main 07FC                    ??_main 007A                 ??_Lcd_Cmd 0071  
         Lcd_Set_Cursor@a 0076           Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078  
         Lcd_Set_Cursor@z 0077   __end_of__initialization 07FC         __end_of_Lcd_Clear 060E  
          __pcstackCOMMON 0070            _Lcd_Set_Cursor 06BC            _Lcd_Shift_Left 060E  
               ?_Lcd_Init 0070                 ?_Lcd_Port 0070                __pmaintext 0759  
  __end_of_Lcd_Set_Cursor 06FC    __end_of_Lcd_Shift_Left 061B         ??_Lcd_Shift_Right 0074  
              ??_Lcd_Init 0074                ??_Lcd_Port 0070                __stringtab 0003  
          _Lcd_Write_Char 0689                   _Lcd_Cmd 0628           ?_Lcd_Set_Cursor 0074  
                 __ptext1 0664                   __ptext2 0689                   __ptext3 061B  
                 __ptext4 060E                   __ptext5 06BC                   __ptext6 06FC  
                 __ptext7 0601                   __ptext8 0628                   __ptext9 0642  
         ?_Lcd_Shift_Left 0070    __end_of_Lcd_Write_Char 06BC      end_of_initialization 07FC  
               Lcd_Port@a 0070           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0077  
       Lcd_Write_String@i 0075                 _Lcd_Clear 0601          _Lcd_Write_String 0664  
     start_initialization 07FC                ?_Lcd_Clear 0070           _Lcd_Shift_Right 061B  
         Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073                 ___latbits 0002  
           __pcstackBANK0 0020                  ?_Lcd_Cmd 0070          ??_Lcd_Set_Cursor 0075  
        ??_Lcd_Shift_Left 0074                 __pstrings 0003   __end_of_Lcd_Shift_Right 0628  
                Lcd_Cmd@a 0073               ??_Lcd_Clear 0074               __stringbase 0008  
        ??_Lcd_Write_Char 0071                  _Lcd_Init 06FC                  _Lcd_Port 0642  
__end_of_Lcd_Write_String 0689        __end_of__stringtab 0009          ?_Lcd_Shift_Right 0070  
                main@i_73 0022        Lcd_Write_Char@temp 0072                 stringcode 0003  
      Lcd_Set_Cursor@temp 0079                  stringdir 0003                  stringtab 0003  
