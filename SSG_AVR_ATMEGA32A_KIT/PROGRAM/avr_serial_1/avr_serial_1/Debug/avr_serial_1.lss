
avr_serial_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000002ee  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f71  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082e  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000799  00000000  00000000  00001c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b2  00000000  00000000  00002897  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003049  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 31 01 	call	0x262	; 0x262 <main>
  7a:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCDBusyLoop>:
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
  82:	87 b3       	in	r24, 0x17	; 23
  84:	8f 70       	andi	r24, 0x0F	; 15
  86:	87 bb       	out	0x17, r24	; 23
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	8e 7f       	andi	r24, 0xFE	; 254
  92:	88 bb       	out	0x18, r24	; 24
  94:	00 00       	nop
  96:	88 b3       	in	r24, 0x18	; 24
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	88 bb       	out	0x18, r24	; 24
  9c:	00 00       	nop
  9e:	86 b3       	in	r24, 0x16	; 22
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	00 00       	nop
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	9b 7f       	andi	r25, 0xFB	; 251
  a8:	98 bb       	out	0x18, r25	; 24
  aa:	00 00       	nop
  ac:	98 b3       	in	r25, 0x18	; 24
  ae:	94 60       	ori	r25, 0x04	; 4
  b0:	98 bb       	out	0x18, r25	; 24
  b2:	00 00       	nop
  b4:	96 b3       	in	r25, 0x16	; 22
  b6:	80 78       	andi	r24, 0x80	; 128
  b8:	00 00       	nop
  ba:	98 b3       	in	r25, 0x18	; 24
  bc:	9b 7f       	andi	r25, 0xFB	; 251
  be:	98 bb       	out	0x18, r25	; 24
  c0:	00 00       	nop
  c2:	81 11       	cpse	r24, r1
  c4:	e8 cf       	rjmp	.-48     	; 0x96 <LCDBusyLoop+0x14>
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8d 7f       	andi	r24, 0xFD	; 253
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6f       	ori	r24, 0xF0	; 240
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	08 95       	ret

000000d4 <LCDByte>:
  d4:	98 2f       	mov	r25, r24
  d6:	92 95       	swap	r25
  d8:	9f 70       	andi	r25, 0x0F	; 15
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	61 11       	cpse	r22, r1
  de:	04 c0       	rjmp	.+8      	; 0xe8 <LCDByte+0x14>
  e0:	28 b3       	in	r18, 0x18	; 24
  e2:	2e 7f       	andi	r18, 0xFE	; 254
  e4:	28 bb       	out	0x18, r18	; 24
  e6:	03 c0       	rjmp	.+6      	; 0xee <LCDByte+0x1a>
  e8:	28 b3       	in	r18, 0x18	; 24
  ea:	21 60       	ori	r18, 0x01	; 1
  ec:	28 bb       	out	0x18, r18	; 24
  ee:	00 00       	nop
  f0:	28 b3       	in	r18, 0x18	; 24
  f2:	24 60       	ori	r18, 0x04	; 4
  f4:	28 bb       	out	0x18, r18	; 24
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	50 e1       	ldi	r21, 0x10	; 16
  fa:	95 9f       	mul	r25, r21
  fc:	90 01       	movw	r18, r0
  fe:	11 24       	eor	r1, r1
 100:	94 2f       	mov	r25, r20
 102:	9f 70       	andi	r25, 0x0F	; 15
 104:	29 2b       	or	r18, r25
 106:	28 bb       	out	0x18, r18	; 24
 108:	00 00       	nop
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	9b 7f       	andi	r25, 0xFB	; 251
 10e:	98 bb       	out	0x18, r25	; 24
 110:	00 00       	nop
 112:	98 b3       	in	r25, 0x18	; 24
 114:	94 60       	ori	r25, 0x04	; 4
 116:	98 bb       	out	0x18, r25	; 24
 118:	28 b3       	in	r18, 0x18	; 24
 11a:	30 e1       	ldi	r19, 0x10	; 16
 11c:	83 9f       	mul	r24, r19
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	92 2f       	mov	r25, r18
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	89 2b       	or	r24, r25
 128:	88 bb       	out	0x18, r24	; 24
 12a:	00 00       	nop
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	88 bb       	out	0x18, r24	; 24
 132:	00 00       	nop
 134:	0e 94 41 00 	call	0x82	; 0x82 <LCDBusyLoop>
 138:	08 95       	ret

0000013a <LCDWriteString>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
 144:	1c c0       	rjmp	.+56     	; 0x17e <LCDWriteString+0x44>
 146:	85 32       	cpi	r24, 0x25	; 37
 148:	b1 f4       	brne	.+44     	; 0x176 <LCDWriteString+0x3c>
 14a:	8e 01       	movw	r16, r28
 14c:	0f 5f       	subi	r16, 0xFF	; 255
 14e:	1f 4f       	sbci	r17, 0xFF	; 255
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	80 53       	subi	r24, 0x30	; 48
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	28 f4       	brcc	.+10     	; 0x162 <LCDWriteString+0x28>
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
 15e:	e8 01       	movw	r28, r16
 160:	0d c0       	rjmp	.+26     	; 0x17c <LCDWriteString+0x42>
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	85 e2       	ldi	r24, 0x25	; 37
 166:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
 172:	e8 01       	movw	r28, r16
 174:	03 c0       	rjmp	.+6      	; 0x17c <LCDWriteString+0x42>
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	88 81       	ld	r24, Y
 180:	81 11       	cpse	r24, r1
 182:	e1 cf       	rjmp	.-62     	; 0x146 <LCDWriteString+0xc>
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 18e:	84 31       	cpi	r24, 0x14	; 20
 190:	78 f4       	brcc	.+30     	; 0x1b0 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 192:	62 30       	cpi	r22, 0x02	; 2
 194:	31 f0       	breq	.+12     	; 0x1a2 <LCDGotoXY+0x14>
 196:	63 30       	cpi	r22, 0x03	; 3
 198:	31 f0       	breq	.+12     	; 0x1a6 <LCDGotoXY+0x18>
 19a:	61 30       	cpi	r22, 0x01	; 1
 19c:	29 f4       	brne	.+10     	; 0x1a8 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 19e:	80 64       	ori	r24, 0x40	; 64
			break;
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 1a2:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 1a6:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
 1b0:	08 95       	ret

000001b2 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	8b e4       	ldi	r24, 0x4B	; 75
 1b8:	9d e1       	ldi	r25, 0x1D	; 29
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCDInit+0x8>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCDInit+0xe>
 1c0:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 1c2:	87 b3       	in	r24, 0x17	; 23
 1c4:	80 6f       	ori	r24, 0xF0	; 240
 1c6:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 1c8:	87 b3       	in	r24, 0x17	; 23
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	87 bb       	out	0x17, r24	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1ce:	87 b3       	in	r24, 0x17	; 23
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	87 bb       	out	0x17, r24	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1d4:	87 b3       	in	r24, 0x17	; 23
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	87 bb       	out	0x17, r24	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 1e0:	88 b3       	in	r24, 0x18	; 24
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	88 bb       	out	0x18, r24	; 24
	CLEAR_RW();
 1e6:	88 b3       	in	r24, 0x18	; 24
 1e8:	8d 7f       	andi	r24, 0xFD	; 253
 1ea:	88 bb       	out	0x18, r24	; 24
	CLEAR_RS();
 1ec:	88 b3       	in	r24, 0x18	; 24
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	88 bb       	out	0x18, r24	; 24
 200:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 202:	88 b3       	in	r24, 0x18	; 24
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	88 bb       	out	0x18, r24	; 24
 208:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 20a:	0e 94 41 00 	call	0x82	; 0x82 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	8c 2f       	mov	r24, r28
 212:	8c 60       	ori	r24, 0x0C	; 12
 214:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	88 e2       	ldi	r24, 0x28	; 40
 21c:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	80 e4       	ldi	r24, 0x40	; 64
 224:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	09 c0       	rjmp	.+18     	; 0x23e <LCDInit+0x8c>
		LCDData(__cgram[__i]);
 22c:	ec 2f       	mov	r30, r28
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e0 5a       	subi	r30, 0xA0	; 160
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	80 81       	ld	r24, Z
 238:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 23c:	cf 5f       	subi	r28, 0xFF	; 255
 23e:	c0 34       	cpi	r28, 0x40	; 64
 240:	a8 f3       	brcs	.-22     	; 0x22c <LCDInit+0x7a>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 c7 00 	call	0x18e	; 0x18e <LCDGotoXY>

}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <usart_init>:
#include <util/delay.h>
#include <lcd.h>

void usart_init(char baud)                              // initialsation of usart
{
	UBRRL=baud;                                        // setting the baud rate
 24e:	89 b9       	out	0x09, r24	; 9
	UCSRB=(1<<RXEN)|(1<<TXEN);//|(1<<RXCIE);              // enable transmiter & receiver, along with Rx intrrupt
 250:	88 e1       	ldi	r24, 0x18	; 24
 252:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);        // 1 stop bit, 8 bit per character
 254:	86 e8       	ldi	r24, 0x86	; 134
 256:	80 bd       	out	0x20, r24	; 32
 258:	08 95       	ret

0000025a <transmit_data>:
}

void transmit_data( unsigned char data)                 // function to transmit data
{
	while(!(UCSRA & (1<<UDRE)));                       // wait for empty transmit buffer
 25a:	5d 9b       	sbis	0x0b, 5	; 11
 25c:	fe cf       	rjmp	.-4      	; 0x25a <transmit_data>
	UDR=data;                                      // sending data
 25e:	8c b9       	out	0x0c, r24	; 12
 260:	08 95       	ret

00000262 <main>:
}


int main(void)
{
	DDRB|=(1<<PB3);
 262:	87 b3       	in	r24, 0x17	; 23
 264:	88 60       	ori	r24, 0x08	; 8
 266:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<PB3);
 268:	88 b3       	in	r24, 0x18	; 24
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	88 bb       	out	0x18, r24	; 24
	char data = 'c';
	LCDInit(LS_NONE);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDInit>

	LCDClear();
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
	LCDWriteString("AVR_UART");
 27c:	80 ea       	ldi	r24, 0xA0	; 160
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 9d 00 	call	0x13a	; 0x13a <LCDWriteString>
	LCDWriteStringXY(0,1,"Tx_chk!!");//
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 c7 00 	call	0x18e	; 0x18e <LCDGotoXY>
 28c:	89 ea       	ldi	r24, 0xA9	; 169
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 9d 00 	call	0x13a	; 0x13a <LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	2f e3       	ldi	r18, 0x3F	; 63
 296:	82 e4       	ldi	r24, 0x42	; 66
 298:	9f e0       	ldi	r25, 0x0F	; 15
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x38>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x42>
 2a4:	00 00       	nop

	_delay_ms(5000);
	LCDClear();
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
	
	usart_init(51);
 2ae:	83 e3       	ldi	r24, 0x33	; 51
 2b0:	0e 94 27 01 	call	0x24e	; 0x24e <usart_init>

int main(void)
{
	DDRB|=(1<<PB3);
	PORTB|=(1<<PB3);
	char data = 'c';
 2b4:	c3 e6       	ldi	r28, 0x63	; 99
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <main+0x58>
		transmit_data(data);
		_delay_ms(1000);
		data++;
		if(data>125)
		{
			data = 33;
 2b8:	c1 e2       	ldi	r28, 0x21	; 33
	
	usart_init(51);

    while (1) 
    {
		LCDGotoXY(0,0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 c7 00 	call	0x18e	; 0x18e <LCDGotoXY>
		LCDData(data);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	8c 2f       	mov	r24, r28
 2c6:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCDByte>
		transmit_data(data);
 2ca:	8c 2f       	mov	r24, r28
 2cc:	0e 94 2d 01 	call	0x25a	; 0x25a <transmit_data>
 2d0:	2f e3       	ldi	r18, 0x3F	; 63
 2d2:	8d e0       	ldi	r24, 0x0D	; 13
 2d4:	93 e0       	ldi	r25, 0x03	; 3
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x74>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x7e>
 2e0:	00 00       	nop
		_delay_ms(1000);
		data++;
 2e2:	cf 5f       	subi	r28, 0xFF	; 255
		if(data>125)
 2e4:	ce 37       	cpi	r28, 0x7E	; 126
 2e6:	40 f7       	brcc	.-48     	; 0x2b8 <main+0x56>
 2e8:	e8 cf       	rjmp	.-48     	; 0x2ba <main+0x58>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
