
avr_4x4_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ef  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000550  00000000  00000000  00000837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000247  00000000  00000000  00000d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f2  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  00001306  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  7a:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GetKeyPressed>:
#include <util/delay.h>

uint8_t GetKeyPressed() // F=0, E=1,....
{
	uint8_t r,c;
	PORTB|= 0XF0;
  82:	88 b3       	in	r24, 0x18	; 24
  84:	80 6f       	ori	r24, 0xF0	; 240
  86:	88 bb       	out	0x18, r24	; 24
	for(c=0;c<4;c++)
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	27 c0       	rjmp	.+78     	; 0xda <GetKeyPressed+0x58>
	{
		DDRB&=~(0XFF);
  8c:	97 b3       	in	r25, 0x17	; 23
  8e:	17 ba       	out	0x17, r1	; 23
		DDRB|=(0X01 << c);
  90:	97 b3       	in	r25, 0x17	; 23
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	08 2e       	mov	r0, r24
  98:	02 c0       	rjmp	.+4      	; 0x9e <GetKeyPressed+0x1c>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GetKeyPressed+0x18>
  a2:	29 2b       	or	r18, r25
  a4:	27 bb       	out	0x17, r18	; 23
		for(r=0;r<4;r++)
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	15 c0       	rjmp	.+42     	; 0xd4 <GetKeyPressed+0x52>
		{
			if(!(PINB & (0X10 << r)))
  aa:	66 b3       	in	r22, 0x16	; 22
  ac:	20 e1       	ldi	r18, 0x10	; 16
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	a9 01       	movw	r20, r18
  b2:	09 2e       	mov	r0, r25
  b4:	02 c0       	rjmp	.+4      	; 0xba <GetKeyPressed+0x38>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <GetKeyPressed+0x34>
  be:	26 2f       	mov	r18, r22
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	24 23       	and	r18, r20
  c4:	35 23       	and	r19, r21
  c6:	23 2b       	or	r18, r19
  c8:	21 f4       	brne	.+8      	; 0xd2 <GetKeyPressed+0x50>
			{
				return (r+(c*4));
  ca:	88 0f       	add	r24, r24
  cc:	88 0f       	add	r24, r24
  ce:	89 0f       	add	r24, r25
  d0:	08 95       	ret
	PORTB|= 0XF0;
	for(c=0;c<4;c++)
	{
		DDRB&=~(0XFF);
		DDRB|=(0X01 << c);
		for(r=0;r<4;r++)
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	94 30       	cpi	r25, 0x04	; 4
  d6:	48 f3       	brcs	.-46     	; 0xaa <GetKeyPressed+0x28>

uint8_t GetKeyPressed() // F=0, E=1,....
{
	uint8_t r,c;
	PORTB|= 0XF0;
	for(c=0;c<4;c++)
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	b8 f2       	brcs	.-82     	; 0x8c <GetKeyPressed+0xa>
			{
				return (r+(c*4));
			}
		}
	}
	return 0XFF;//Indicate No key pressed
  de:	8f ef       	ldi	r24, 0xFF	; 255
}
  e0:	08 95       	ret

000000e2 <main>:
int main(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	60 97       	sbiw	r28, 0x10	; 16
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
	DDRC|=((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
  f6:	84 b3       	in	r24, 0x14	; 20
  f8:	8f 60       	ori	r24, 0x0F	; 15
  fa:	84 bb       	out	0x14, r24	; 20
	PORTC&=~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	85 bb       	out	0x15, r24	; 21
	char array_1[]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	e0 e6       	ldi	r30, 0x60	; 96
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	01 90       	ld	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	8a 95       	dec	r24
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x2a>
	uint8_t key;
	while(1)
	{
		key=GetKeyPressed(); //Get the keycode of pressed key
 114:	0e 94 41 00 	call	0x82	; 0x82 <GetKeyPressed>
		PORTC=array_1[key];
 118:	e1 e0       	ldi	r30, 0x01	; 1
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	ec 0f       	add	r30, r28
 11e:	fd 1f       	adc	r31, r29
 120:	e8 0f       	add	r30, r24
 122:	f1 1d       	adc	r31, r1
 124:	80 81       	ld	r24, Z
 126:	85 bb       	out	0x15, r24	; 21
 128:	f5 cf       	rjmp	.-22     	; 0x114 <main+0x32>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
