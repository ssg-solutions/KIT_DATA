
avrboard_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cbb  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000727  00000000  00000000  00001063  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046a  00000000  00000000  0000178a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000056a  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000025be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  7a:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	c0 98       	cbi	0x18, 0	; 24
  90:	c1 98       	cbi	0x18, 1	; 24
  92:	c3 9a       	sbi	0x18, 3	; 24
  94:	c2 9a       	sbi	0x18, 2	; 24
  96:	00 00       	nop
  98:	c2 98       	cbi	0x18, 2	; 24
  9a:	32 e4       	ldi	r19, 0x42	; 66
  9c:	3a 95       	dec	r19
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_Command+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_Command+0x20>
  a2:	28 b3       	in	r18, 0x18	; 24
  a4:	2f 70       	andi	r18, 0x0F	; 15
  a6:	30 e1       	ldi	r19, 0x10	; 16
  a8:	83 9f       	mul	r24, r19
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	82 2b       	or	r24, r18
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	c2 9a       	sbi	0x18, 2	; 24
  b4:	00 00       	nop
  b6:	c2 98       	cbi	0x18, 2	; 24
  b8:	83 ef       	ldi	r24, 0xF3	; 243
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Command+0x40>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <LCD_Init>:
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 bb       	out	0x17, r24	; 23
  ca:	87 e8       	ldi	r24, 0x87	; 135
  cc:	93 e1       	ldi	r25, 0x13	; 19
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Init+0x8>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Init+0xe>
  d4:	00 00       	nop
  d6:	83 e3       	ldi	r24, 0x33	; 51
  d8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  e2:	88 e2       	ldi	r24, 0x28	; 40
  e4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  fa:	08 95       	ret

000000fc <LCD_Char>:
  fc:	98 b3       	in	r25, 0x18	; 24
  fe:	9f 70       	andi	r25, 0x0F	; 15
 100:	28 2f       	mov	r18, r24
 102:	20 7f       	andi	r18, 0xF0	; 240
 104:	92 2b       	or	r25, r18
 106:	98 bb       	out	0x18, r25	; 24
 108:	c0 9a       	sbi	0x18, 0	; 24
 10a:	c1 98       	cbi	0x18, 1	; 24
 10c:	c2 9a       	sbi	0x18, 2	; 24
 10e:	00 00       	nop
 110:	c2 98       	cbi	0x18, 2	; 24
 112:	32 e4       	ldi	r19, 0x42	; 66
 114:	3a 95       	dec	r19
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_Char+0x18>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_Char+0x1e>
 11a:	28 b3       	in	r18, 0x18	; 24
 11c:	2f 70       	andi	r18, 0x0F	; 15
 11e:	30 e1       	ldi	r19, 0x10	; 16
 120:	83 9f       	mul	r24, r19
 122:	c0 01       	movw	r24, r0
 124:	11 24       	eor	r1, r1
 126:	82 2b       	or	r24, r18
 128:	88 bb       	out	0x18, r24	; 24
 12a:	c2 9a       	sbi	0x18, 2	; 24
 12c:	00 00       	nop
 12e:	c2 98       	cbi	0x18, 2	; 24
 130:	83 ef       	ldi	r24, 0xF3	; 243
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Char+0x38>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Char+0x3e>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <LCD_String>:
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
 144:	88 81       	ld	r24, Y
 146:	88 23       	and	r24, r24
 148:	31 f0       	breq	.+12     	; 0x156 <LCD_String+0x18>
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Char>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <LCD_String+0xe>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <main>:
}

int main()
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <main+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <main+0x8>
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
	char int2string[5];

	LCD_Init();			/* Initialization of LCD*/
 16a:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Init>

	LCD_String("SSG_Embedded_AVR");	/* Write string on 1st line of LCD*/
 16e:	80 e6       	ldi	r24, 0x60	; 96
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_String>
	LCD_Command(0xC0);		/* Go to 2nd line*/
 176:	80 ec       	ldi	r24, 0xC0	; 192
 178:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String("Hello World");	/* Write string on 2nd line*/
 17c:	81 e7       	ldi	r24, 0x71	; 113
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f e3       	ldi	r18, 0x3F	; 63
 186:	82 e4       	ldi	r24, 0x42	; 66
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x2e>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x38>
 194:	00 00       	nop
	_delay_ms(5000);
	while(1){
		for(uint8_t i = 0; i<9999; i++)// lets display an integer value on LCD
 196:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 198:	4a e0       	ldi	r20, 0x0A	; 10
 19a:	be 01       	movw	r22, r28
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	7f 4f       	sbci	r23, 0xFF	; 255
 1a0:	81 2f       	mov	r24, r17
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 ed 00 	call	0x1da	; 0x1da <__itoa_ncheck>
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
 1ae:	8d e7       	ldi	r24, 0x7D	; 125
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_String>
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 1b6:	83 e8       	ldi	r24, 0x83	; 131
 1b8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_String>
 1c4:	2f e3       	ldi	r18, 0x3F	; 63
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	93 e0       	ldi	r25, 0x03	; 3
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x6e>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x78>
 1d4:	00 00       	nop
	LCD_String("SSG_Embedded_AVR");	/* Write string on 1st line of LCD*/
	LCD_Command(0xC0);		/* Go to 2nd line*/
	LCD_String("Hello World");	/* Write string on 2nd line*/
	_delay_ms(5000);
	while(1){
		for(uint8_t i = 0; i<9999; i++)// lets display an integer value on LCD
 1d6:	1f 5f       	subi	r17, 0xFF	; 255
 1d8:	df cf       	rjmp	.-66     	; 0x198 <main+0x3c>

000001da <__itoa_ncheck>:
 1da:	bb 27       	eor	r27, r27
 1dc:	4a 30       	cpi	r20, 0x0A	; 10
 1de:	31 f4       	brne	.+12     	; 0x1ec <__itoa_ncheck+0x12>
 1e0:	99 23       	and	r25, r25
 1e2:	22 f4       	brpl	.+8      	; 0x1ec <__itoa_ncheck+0x12>
 1e4:	bd e2       	ldi	r27, 0x2D	; 45
 1e6:	90 95       	com	r25
 1e8:	81 95       	neg	r24
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__utoa_common>

000001f0 <__utoa_ncheck>:
 1f0:	bb 27       	eor	r27, r27

000001f2 <__utoa_common>:
 1f2:	fb 01       	movw	r30, r22
 1f4:	55 27       	eor	r21, r21
 1f6:	aa 27       	eor	r26, r26
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	aa 1f       	adc	r26, r26
 1fe:	a4 17       	cp	r26, r20
 200:	10 f0       	brcs	.+4      	; 0x206 <__utoa_common+0x14>
 202:	a4 1b       	sub	r26, r20
 204:	83 95       	inc	r24
 206:	50 51       	subi	r21, 0x10	; 16
 208:	b9 f7       	brne	.-18     	; 0x1f8 <__utoa_common+0x6>
 20a:	a0 5d       	subi	r26, 0xD0	; 208
 20c:	aa 33       	cpi	r26, 0x3A	; 58
 20e:	08 f0       	brcs	.+2      	; 0x212 <__utoa_common+0x20>
 210:	a9 5d       	subi	r26, 0xD9	; 217
 212:	a1 93       	st	Z+, r26
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	79 f7       	brne	.-34     	; 0x1f6 <__utoa_common+0x4>
 218:	b1 11       	cpse	r27, r1
 21a:	b1 93       	st	Z+, r27
 21c:	11 92       	st	Z+, r1
 21e:	cb 01       	movw	r24, r22
 220:	0c 94 12 01 	jmp	0x224	; 0x224 <strrev>

00000224 <strrev>:
 224:	dc 01       	movw	r26, r24
 226:	fc 01       	movw	r30, r24
 228:	67 2f       	mov	r22, r23
 22a:	71 91       	ld	r23, Z+
 22c:	77 23       	and	r23, r23
 22e:	e1 f7       	brne	.-8      	; 0x228 <strrev+0x4>
 230:	32 97       	sbiw	r30, 0x02	; 2
 232:	04 c0       	rjmp	.+8      	; 0x23c <strrev+0x18>
 234:	7c 91       	ld	r23, X
 236:	6d 93       	st	X+, r22
 238:	70 83       	st	Z, r23
 23a:	62 91       	ld	r22, -Z
 23c:	ae 17       	cp	r26, r30
 23e:	bf 07       	cpc	r27, r31
 240:	c8 f3       	brcs	.-14     	; 0x234 <strrev+0x10>
 242:	08 95       	ret

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
