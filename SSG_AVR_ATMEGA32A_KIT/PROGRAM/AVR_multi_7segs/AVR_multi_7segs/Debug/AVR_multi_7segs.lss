
AVR_multi_7segs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b9  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c3  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

 

int main(void)
{
	DDRB=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
  70:	18 ba       	out	0x18, r1	; 24
	uint16_t num = 1234;
	while(1)
	{
		
		num = 1234;
		PORTB=((seg_4)|(num/1000));
  72:	31 e1       	ldi	r19, 0x11	; 17
		_delay_us(100);
		num%=1000;
		
		PORTB=((seg_3)|(num/100));
  74:	22 e2       	ldi	r18, 0x22	; 34
		_delay_us(100);
		num%=100;
		
		PORTB=((seg_2)|(num/10));
  76:	93 e4       	ldi	r25, 0x43	; 67
		_delay_us(100);
		num%=10;
		
		PORTB=((seg_1)|(num));
  78:	84 e8       	ldi	r24, 0x84	; 132
	uint16_t num = 1234;
	while(1)
	{
		
		num = 1234;
		PORTB=((seg_4)|(num/1000));
  7a:	38 bb       	out	0x18, r19	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	41 e2       	ldi	r20, 0x21	; 33
  7e:	4a 95       	dec	r20
  80:	f1 f7       	brne	.-4      	; 0x7e <main+0x12>
  82:	00 00       	nop
		_delay_us(100);
		num%=1000;
		
		PORTB=((seg_3)|(num/100));
  84:	28 bb       	out	0x18, r18	; 24
  86:	41 e2       	ldi	r20, 0x21	; 33
  88:	4a 95       	dec	r20
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
  8c:	00 00       	nop
		_delay_us(100);
		num%=100;
		
		PORTB=((seg_2)|(num/10));
  8e:	98 bb       	out	0x18, r25	; 24
  90:	41 e2       	ldi	r20, 0x21	; 33
  92:	4a 95       	dec	r20
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x26>
  96:	00 00       	nop
		_delay_us(100);
		num%=10;
		
		PORTB=((seg_1)|(num));
  98:	88 bb       	out	0x18, r24	; 24
  9a:	41 e2       	ldi	r20, 0x21	; 33
  9c:	4a 95       	dec	r20
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x30>
  a0:	00 00       	nop
  a2:	eb cf       	rjmp	.-42     	; 0x7a <main+0xe>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
